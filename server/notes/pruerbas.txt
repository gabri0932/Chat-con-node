<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat An√≥nimo</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .chat-container {
            width: 100%;
            max-width: 420px;
            height: 600px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            box-shadow: 0 32px 64px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            animation: slideIn 0.8s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .chat-header {
            background: linear-gradient(135deg, #4f46e5, #7c3aed);
            color: white;
            padding: 20px;
            text-align: center;
            position: relative;
        }

        .chat-header h1 {
            font-size: 22px;
            font-weight: 600;
            margin-bottom: 4px;
        }

        .chat-header p {
            opacity: 0.8;
            font-size: 14px;
        }

        .status-indicator {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            background: #10b981;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .status-text {
            font-size: 12px;
            opacity: 0.9;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            scroll-behavior: smooth;
        }

        .messages-container::-webkit-scrollbar {
            width: 6px;
        }

        .messages-container::-webkit-scrollbar-track {
            background: transparent;
        }

        .messages-container::-webkit-scrollbar-thumb {
            background: #e5e7eb;
            border-radius: 3px;
        }

        .message {
            margin-bottom: 16px;
            animation: messageSlide 0.4s ease-out;
            padding: 12px 16px;
            border-radius: 18px;
            max-width: 85%;
            word-wrap: break-word;
            position: relative;
            background: linear-gradient(135deg, #ffffff, #f8fafc);
            color: #374151;
            border: 1px solid #e5e7eb;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .message:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
        }

        @keyframes messageSlide {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .message-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 4px;
            opacity: 0.7;
            font-size: 11px;
        }

        .user-avatar {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4f46e5, #7c3aed);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 10px;
        }

        .message-time {
            color: #9ca3af;
            font-size: 10px;
        }

        .message-reactions {
            display: flex;
            gap: 4px;
            margin-top: 6px;
            flex-wrap: wrap;
        }

        .reaction {
            background: #f3f4f6;
            border-radius: 12px;
            padding: 2px 6px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid #e5e7eb;
        }

        .reaction:hover {
            background: #e5e7eb;
            transform: scale(1.1);
        }

        .reaction.active {
            background: #dbeafe;
            border-color: #3b82f6;
        }

        .message-count {
            position: absolute;
            top: -8px;
            left: -8px;
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: bold;
            animation: bounce 0.5s ease-out;
        }

        @keyframes bounce {
            0% { transform: scale(0); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .floating-hearts {
            position: fixed;
            pointer-events: none;
            z-index: 1000;
        }

        .heart {
            position: absolute;
            color: #ef4444;
            font-size: 20px;
            animation: floatHeart 2s ease-out forwards;
        }

        @keyframes floatHeart {
            0% {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
            100% {
                opacity: 0;
                transform: translateY(-100px) scale(1.5);
            }
        }

        .quick-reactions {
            display: flex;
            gap: 8px;
            padding: 8px 0;
            justify-content: center;
            border-top: 1px solid #f3f4f6;
            margin-top: 8px;
        }

        .quick-reaction {
            background: #f9fafb;
            border: 1px solid #e5e7eb;
            border-radius: 20px;
            padding: 6px 12px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 14px;
        }

        .quick-reaction:hover {
            background: #f3f4f6;
            transform: scale(1.05);
        }

        .message-counter {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            padding: 8px 12px;
            border-radius: 20px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            font-size: 12px;
            color: #6b7280;
            z-index: 100;
        }

        .input-container {
            padding: 20px;
            background: rgba(248, 250, 252, 0.9);
            backdrop-filter: blur(10px);
            border-top: 1px solid rgba(0, 0, 0, 0.1);
        }

        .input-form {
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .message-input {
            flex: 1;
            padding: 14px 20px;
            border: 2px solid #e5e7eb;
            border-radius: 25px;
            font-size: 16px;
            outline: none;
            transition: all 0.3s ease;
            background: white;
        }

        .message-input:focus {
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
            transform: translateY(-1px);
        }

        .send-button {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #4f46e5, #7c3aed);
            border: none;
            border-radius: 50%;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
        }

        .send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(79, 70, 229, 0.4);
        }

        .send-button:active {
            transform: translateY(0);
        }

        .send-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .empty-state {
            text-align: center;
            color: #6b7280;
            padding: 40px 20px;
            font-style: italic;
        }

        .empty-state i {
            font-size: 48px;
            opacity: 0.3;
            margin-bottom: 16px;
            display: block;
        }

        @media (max-width: 480px) {
            .chat-container {
                height: 100vh;
                border-radius: 0;
                max-width: none;
            }
            
            body {
                padding: 0;
            }
        }

        .typing-indicator {
            display: none;
            padding: 12px 16px;
            margin-bottom: 16px;
            background: #f3f4f6;
            border-radius: 18px;
            max-width: 85%;
            align-items: center;
            gap: 8px;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            background: #9ca3af;
            border-radius: 50%;
            animation: typing 1.4s ease-in-out infinite;
        }

        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typing {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-10px); }
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h1><i class="fas fa-comments"></i> Chat An√≥nimo</h1>
            <p>Conectado y listo para chatear</p>
            <div class="status-indicator">
                <div class="status-dot"></div>
                <span class="status-text">En l√≠nea</span>
            </div>
        </div>

        <div class="messages-container" id="messages">
            <div class="empty-state">
                <i class="fas fa-comment-dots"></i>
                ¬°S√© el primero en enviar un mensaje!
            </div>
            <div class="typing-indicator" id="typingIndicator">
                <span>Alguien est√° escribiendo</span>
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        </div>

        <div class="input-container">
            <form class="input-form" id="messageForm">
                <input 
                    type="text" 
                    class="message-input" 
                    id="messageInput" 
                    placeholder="Escribe tu mensaje aqu√≠..."
                    autocomplete="off"
                    maxlength="500"
                />
                <button type="submit" class="send-button" id="sendButton">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </form>
            <div class="quick-reactions">
                <div class="quick-reaction" onclick="sendQuickMessage('üëã ¬°Hola!')">üëã</div>
                <div class="quick-reaction" onclick="sendQuickMessage('üòÇ jajaja')">üòÇ</div>
                <div class="quick-reaction" onclick="sendQuickMessage('üëç Me gusta')">üëç</div>
                <div class="quick-reaction" onclick="sendQuickMessage('‚ù§Ô∏è Love')">‚ù§Ô∏è</div>
                <div class="quick-reaction" onclick="sendQuickMessage('üî• Genial!')">üî•</div>
            </div>
        </div>
    </div>

    <script type="module">
        import { io } from "https://cdn.socket.io/4.4.1/socket.io.esm.min.js";
              //dev 
              const socket = io("http://localhost:8000");

      //   // Configuraci√≥n de Socket.IO
      //   const socket = io("https://api-chatanonimo-deploy.onrender.com/", {
      //       transports: ["websocket", "polling"],
      //       secure: true
      //   });

        // Referencias DOM
        const messageForm = document.getElementById("messageForm");
        const messageInput = document.getElementById("messageInput");
        const messagesContainer = document.getElementById("messages");
        const sendButton = document.getElementById("sendButton");
        const emptyState = document.querySelector(".empty-state");
        const typingIndicator = document.getElementById("typingIndicator");

        let messageCount = 0;
        let isTyping = false;
        let typingTimeout;
        
        // Array de avatares y colores aleatorios
        const avatarColors = ['#4f46e5', '#7c3aed', '#06b6d4', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06d6a0'];
        const reactions = ['üëç', '‚ù§Ô∏è', 'üòÇ', 'üòÆ', 'üò¢', 'üò°'];
        
        // Funci√≥n para generar avatar aleatorio
        function generateAvatar() {
            const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            const color = avatarColors[Math.floor(Math.random() * avatarColors.length)];
            const letter = letters.charAt(Math.floor(Math.random() * letters.length));
            return { letter, color };
        }

        // Funci√≥n para obtener timestamp
        function getTimestamp() {
            return new Date().toLocaleTimeString('es-ES', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        }

        // Funci√≥n para crear corazones flotantes
        function createFloatingHeart(x, y) {
            const heart = document.createElement('div');
            heart.innerHTML = '‚ù§Ô∏è';
            heart.className = 'heart';
            heart.style.left = x + 'px';
            heart.style.top = y + 'px';
            
            const container = document.createElement('div');
            container.className = 'floating-hearts';
            container.appendChild(heart);
            document.body.appendChild(container);
            
            setTimeout(() => container.remove(), 2000);
        }

        // Funci√≥n para crear y a√±adir mensaje
        function addMessage(content, isOwn = false) {
            if (emptyState) {
                emptyState.remove();
            }
            
            const avatar = generateAvatar();
            const timestamp = getTimestamp();
            
            const messageElement = document.createElement("div");
            messageElement.className = "message";
            
            // Crear contenido del mensaje con avatar y timestamp
            messageElement.innerHTML = `
                <div class="message-header">
                    <div class="user-avatar" style="background: ${avatar.color}">
                        ${avatar.letter}
                    </div>
                    <span class="message-time">${timestamp}</span>
                    <span class="message-count">${messageCount + 1}</span>
                </div>
                <div class="message-content">${content}</div>
                <div class="message-reactions" data-message="${messageCount}"></div>
            `;
            
            // Agregar event listeners para reacciones
            messageElement.addEventListener('dblclick', (e) => {
                const rect = e.target.getBoundingClientRect();
                createFloatingHeart(rect.left + rect.width/2, rect.top);
                
                // Agregar reacci√≥n de coraz√≥n
                addReaction(messageCount, '‚ù§Ô∏è');
            });
            
            messagesContainer.insertBefore(messageElement, typingIndicator);
            messageCount++;
            
            // Actualizar contador
            updateMessageCounter();
            
            // Scroll autom√°tico al √∫ltimo mensaje
            setTimeout(() => {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, 100);
        }

        // Funci√≥n para agregar reacciones
        function addReaction(messageIndex, emoji) {
            const reactionsContainer = document.querySelector(`[data-message="${messageIndex}"]`);
            if (reactionsContainer) {
                const existingReaction = Array.from(reactionsContainer.children)
                    .find(child => child.textContent.includes(emoji));
                
                if (existingReaction) {
                    // Incrementar contador
                    const count = parseInt(existingReaction.dataset.count || 1) + 1;
                    existingReaction.textContent = `${emoji} ${count}`;
                    existingReaction.dataset.count = count;
                    existingReaction.classList.add('active');
                } else {
                    // Crear nueva reacci√≥n
                    const reaction = document.createElement('span');
                    reaction.className = 'reaction';
                    reaction.textContent = `${emoji} 1`;
                    reaction.dataset.count = 1;
                    reactionsContainer.appendChild(reaction);
                }
            }
        }

        // Funci√≥n para actualizar contador de mensajes
        function updateMessageCounter() {
            let counter = document.querySelector('.message-counter');
            if (!counter) {
                counter = document.createElement('div');
                counter.className = 'message-counter';
                document.body.appendChild(counter);
            }
            counter.innerHTML = `<i class="fas fa-comments"></i> ${messageCount} mensajes`;
        }

        // Funci√≥n para mostrar/ocultar indicador de escritura
        function showTypingIndicator() {
            typingIndicator.style.display = "flex";
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function hideTypingIndicator() {
            typingIndicator.style.display = "none";
        }

        // Event listeners de Socket.IO
        socket.on("chat message", (msg) => {
            hideTypingIndicator();
            addMessage(msg, false);
            
            // Actualizar serverOffset si est√° disponible
            if (socket.auth && typeof serveroffset !== 'undefined') {
                socket.auth.serveroffset = serveroffset;
            }
        });

        socket.on("user typing", () => {
            if (!isTyping) {
                showTypingIndicator();
                isTyping = true;
            }
            
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                hideTypingIndicator();
                isTyping = false;
            }, 1000);
        });

        // Manejo del formulario
        messageForm.addEventListener("submit", (e) => {
            e.preventDefault();
            const message = messageInput.value.trim();
            
            if (message) {
                // Deshabilitar bot√≥n temporalmente
                sendButton.disabled = true;
                sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                
                socket.emit("chat message", message);
                messageInput.value = "";
                
                // Rehabilitar bot√≥n despu√©s de un breve delay
                setTimeout(() => {
                    sendButton.disabled = false;
                    sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
                }, 500);
            }
        });

        // Detectar cuando el usuario est√° escribiendo
        let typingTimer;
        messageInput.addEventListener("input", () => {
            socket.emit("typing");
            
            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                socket.emit("stop typing");
            }, 1000);
        });

        // Efectos visuales adicionales
        messageInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter") {
                messageForm.dispatchEvent(new Event("submit"));
            }
        });

        // Auto-focus en el input
        messageInput.focus();

        // Manejo de estados de conexi√≥n
        socket.on("connect", () => {
            console.log("Conectado al servidor");
            document.querySelector(".status-text").textContent = "En l√≠nea";
            document.querySelector(".status-dot").style.background = "#10b981";
        });

        socket.on("disconnect", () => {
            console.log("Desconectado del servidor");
            document.querySelector(".status-text").textContent = "Desconectado";
            document.querySelector(".status-dot").style.background = "#ef4444";
        });

        // Configuraci√≥n adicional de autenticaci√≥n
        socket.auth = {
            token: 1231451,
            username: null,
            serveroffset: 0
        };

        // Funci√≥n para enviar mensajes r√°pidos
        function sendQuickMessage(message) {
            if (!sendButton.disabled) {
                socket.emit("chat message", message);
            }
        }

        // Hacer la funci√≥n global
        window.sendQuickMessage = sendQuickMessage;
    </script>
</body>
</html>